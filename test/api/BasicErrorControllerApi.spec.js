/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiDocumentation);
  }
}(this, function(expect, ApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiDocumentation.BasicErrorControllerApi();
  });

  describe('(package)', function() {
    describe('BasicErrorControllerApi', function() {
      describe('errorHtmlUsingDELETE', function() {
        it('should call errorHtmlUsingDELETE successfully', function(done) {
          // TODO: uncomment errorHtmlUsingDELETE call and complete the assertions
          /*

          instance.errorHtmlUsingDELETE(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ApiDocumentation.ModelAndView);
            expect(data.empty).to.be.a('boolean');
            expect(data.empty).to.be(false);
            expect(data.model).to.be.a(Object);
            expect(data.model).to.be();
            {
              let dataCtr = data.modelMap;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.reference).to.be.a('boolean');
            expect(data.reference).to.be(false);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("100 CONTINUE");
            expect(data.view).to.be.a(ApiDocumentation.View);
                  expect(data.view.contentType).to.be.a('string');
              expect(data.view.contentType).to.be("");
            expect(data.viewName).to.be.a('string');
            expect(data.viewName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('errorHtmlUsingGET', function() {
        it('should call errorHtmlUsingGET successfully', function(done) {
          // TODO: uncomment errorHtmlUsingGET call and complete the assertions
          /*

          instance.errorHtmlUsingGET(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ApiDocumentation.ModelAndView);
            expect(data.empty).to.be.a('boolean');
            expect(data.empty).to.be(false);
            expect(data.model).to.be.a(Object);
            expect(data.model).to.be();
            {
              let dataCtr = data.modelMap;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.reference).to.be.a('boolean');
            expect(data.reference).to.be(false);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("100 CONTINUE");
            expect(data.view).to.be.a(ApiDocumentation.View);
                  expect(data.view.contentType).to.be.a('string');
              expect(data.view.contentType).to.be("");
            expect(data.viewName).to.be.a('string');
            expect(data.viewName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('errorHtmlUsingHEAD', function() {
        it('should call errorHtmlUsingHEAD successfully', function(done) {
          // TODO: uncomment errorHtmlUsingHEAD call and complete the assertions
          /*

          instance.errorHtmlUsingHEAD(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ApiDocumentation.ModelAndView);
            expect(data.empty).to.be.a('boolean');
            expect(data.empty).to.be(false);
            expect(data.model).to.be.a(Object);
            expect(data.model).to.be();
            {
              let dataCtr = data.modelMap;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.reference).to.be.a('boolean');
            expect(data.reference).to.be(false);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("100 CONTINUE");
            expect(data.view).to.be.a(ApiDocumentation.View);
                  expect(data.view.contentType).to.be.a('string');
              expect(data.view.contentType).to.be("");
            expect(data.viewName).to.be.a('string');
            expect(data.viewName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('errorHtmlUsingOPTIONS', function() {
        it('should call errorHtmlUsingOPTIONS successfully', function(done) {
          // TODO: uncomment errorHtmlUsingOPTIONS call and complete the assertions
          /*

          instance.errorHtmlUsingOPTIONS(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ApiDocumentation.ModelAndView);
            expect(data.empty).to.be.a('boolean');
            expect(data.empty).to.be(false);
            expect(data.model).to.be.a(Object);
            expect(data.model).to.be();
            {
              let dataCtr = data.modelMap;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.reference).to.be.a('boolean');
            expect(data.reference).to.be(false);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("100 CONTINUE");
            expect(data.view).to.be.a(ApiDocumentation.View);
                  expect(data.view.contentType).to.be.a('string');
              expect(data.view.contentType).to.be("");
            expect(data.viewName).to.be.a('string');
            expect(data.viewName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('errorHtmlUsingPATCH', function() {
        it('should call errorHtmlUsingPATCH successfully', function(done) {
          // TODO: uncomment errorHtmlUsingPATCH call and complete the assertions
          /*

          instance.errorHtmlUsingPATCH(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ApiDocumentation.ModelAndView);
            expect(data.empty).to.be.a('boolean');
            expect(data.empty).to.be(false);
            expect(data.model).to.be.a(Object);
            expect(data.model).to.be();
            {
              let dataCtr = data.modelMap;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.reference).to.be.a('boolean');
            expect(data.reference).to.be(false);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("100 CONTINUE");
            expect(data.view).to.be.a(ApiDocumentation.View);
                  expect(data.view.contentType).to.be.a('string');
              expect(data.view.contentType).to.be("");
            expect(data.viewName).to.be.a('string');
            expect(data.viewName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('errorHtmlUsingPOST', function() {
        it('should call errorHtmlUsingPOST successfully', function(done) {
          // TODO: uncomment errorHtmlUsingPOST call and complete the assertions
          /*

          instance.errorHtmlUsingPOST(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ApiDocumentation.ModelAndView);
            expect(data.empty).to.be.a('boolean');
            expect(data.empty).to.be(false);
            expect(data.model).to.be.a(Object);
            expect(data.model).to.be();
            {
              let dataCtr = data.modelMap;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.reference).to.be.a('boolean');
            expect(data.reference).to.be(false);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("100 CONTINUE");
            expect(data.view).to.be.a(ApiDocumentation.View);
                  expect(data.view.contentType).to.be.a('string');
              expect(data.view.contentType).to.be("");
            expect(data.viewName).to.be.a('string');
            expect(data.viewName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('errorHtmlUsingPUT', function() {
        it('should call errorHtmlUsingPUT successfully', function(done) {
          // TODO: uncomment errorHtmlUsingPUT call and complete the assertions
          /*

          instance.errorHtmlUsingPUT(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ApiDocumentation.ModelAndView);
            expect(data.empty).to.be.a('boolean');
            expect(data.empty).to.be(false);
            expect(data.model).to.be.a(Object);
            expect(data.model).to.be();
            {
              let dataCtr = data.modelMap;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(Object);
                expect(data).to.be();
              }
            }
            expect(data.reference).to.be.a('boolean');
            expect(data.reference).to.be(false);
            expect(data.status).to.be.a('string');
            expect(data.status).to.be("100 CONTINUE");
            expect(data.view).to.be.a(ApiDocumentation.View);
                  expect(data.view.contentType).to.be.a('string');
              expect(data.view.contentType).to.be("");
            expect(data.viewName).to.be.a('string');
            expect(data.viewName).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
