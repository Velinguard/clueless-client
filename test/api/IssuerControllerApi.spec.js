/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiDocumentation);
  }
}(this, function(expect, ApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiDocumentation.IssuerControllerApi();
  });

  describe('(package)', function() {
    describe('IssuerControllerApi', function() {
      describe('createCredSchemaUsingPUT', function() {
        it('should call createCredSchemaUsingPUT successfully', function(done) {
          // TODO: uncomment, update parameter values for createCredSchemaUsingPUT call and complete the assertions
          /*
          var opts = {};
          opts.defaultStewardDid = "defaultStewardDid_example";
          opts.walletId = "walletId_example";
          opts.walletKey = "walletKey_example";

          instance.createCredSchemaUsingPUT(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createCredentialDefinitionUsingPUT', function() {
        it('should call createCredentialDefinitionUsingPUT successfully', function(done) {
          // TODO: uncomment, update parameter values for createCredentialDefinitionUsingPUT call and complete the assertions
          /*
          var opts = {};
          opts.personDid = "personDid_example";
          opts.schemaId = "schemaId_example";
          opts.walletId = "walletId_example";
          opts.walletKey = "walletKey_example";

          instance.createCredentialDefinitionUsingPUT(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('createIssuerUsingPUT', function() {
        it('should call createIssuerUsingPUT successfully', function(done) {
          // TODO: uncomment, update parameter values for createIssuerUsingPUT call and complete the assertions
          /*
          var opts = {};
          opts.walletId = "walletId_example";
          opts.walletKey = "walletKey_example";

          instance.createIssuerUsingPUT(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a('string');
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCredentialDefinitionUsingPUT', function() {
        it('should call getCredentialDefinitionUsingPUT successfully', function(done) {
          // TODO: uncomment, update parameter values for getCredentialDefinitionUsingPUT call and complete the assertions
          /*
          var opts = {};
          opts.credDefId = "credDefId_example";
          opts.indyWalletWalletHandle = 56;
          opts.masterSecretId = "masterSecretId_example";
          opts.name = "name_example";
          opts.personDid = "personDid_example";

          instance.getCredentialDefinitionUsingPUT(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ApiDocumentation.CredentialDefinition);
            expect(data.credDefId).to.be.a('string');
            expect(data.credDefId).to.be("");
            expect(data.credDefJson).to.be.a('string');
            expect(data.credDefJson).to.be("");
            expect(data.credDefs).to.be.a('string');
            expect(data.credDefs).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issuerCreateCredentialsUsingPUT', function() {
        it('should call issuerCreateCredentialsUsingPUT successfully', function(done) {
          // TODO: uncomment, update parameter values for issuerCreateCredentialsUsingPUT call and complete the assertions
          /*
          var opts = {};
          opts.credDefId = "credDefId_example";
          opts.dateOfBirth = "dateOfBirth_example";
          opts.issuerDid = "issuerDid_example";
          opts.issuerWalletId = "issuerWalletId_example";
          opts.issuerWalletKey = "issuerWalletKey_example";
          opts.licenceLevel = "licenceLevel_example";
          opts.name = "name_example";
          opts.proverDid = "proverDid_example";
          opts.proverWalletId = "proverWalletId_example";
          opts.proverWalletKey = "proverWalletKey_example";

          instance.issuerCreateCredentialsUsingPUT(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ApiDocumentation.EmailInfo);
            expect(data.masterSecretId).to.be.a('string');
            expect(data.masterSecretId).to.be("");
            expect(data.personDid).to.be.a('string');
            expect(data.personDid).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('issuerEmailCreatedCredentialsUsingPUT', function() {
        it('should call issuerEmailCreatedCredentialsUsingPUT successfully', function(done) {
          // TODO: uncomment, update parameter values for issuerEmailCreatedCredentialsUsingPUT call
          /*
          var opts = {};
          opts.credDefId = "credDefId_example";
          opts.dateOfBirth = "dateOfBirth_example";
          opts.email = "email_example";
          opts.issuerDid = "issuerDid_example";
          opts.issuerWalletId = "issuerWalletId_example";
          opts.issuerWalletKey = "issuerWalletKey_example";
          opts.licenceLevel = "licenceLevel_example";
          opts.name = "name_example";
          opts.proverDid = "proverDid_example";
          opts.proverWalletId = "proverWalletId_example";
          opts.proverWalletKey = "proverWalletKey_example";

          instance.issuerEmailCreatedCredentialsUsingPUT(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
