/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiDocumentation);
  }
}(this, function(expect, ApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiDocumentation.IssuerControllerApi();
  });

  describe('(package)', function() {
    describe('IssuerControllerApi', function() {
      describe('createCredentialsUsingPUT', function() {
        it('should call createCredentialsUsingPUT successfully', function(done) {
          // TODO: uncomment, update parameter values for createCredentialsUsingPUT call and complete the assertions
          /*
          var opts = {};
          opts.JSON = "JSON_example";
          opts.age = 789;
          opts.credOffer = "credOffer_example";
          opts.credRequestCredentialRequestJson = "credRequestCredentialRequestJson_example";
          opts.credRequestCredentialRequestMetadataJson = "credRequestCredentialRequestMetadataJson_example";
          opts.credentialsCredDefId = "credentialsCredDefId_example";
          opts.credentialsCredDefJson = "credentialsCredDefJson_example";
          opts.dateOfBirth = new Date("2013-10-20");
          opts.licenceLevel = 56;
          opts.masterSecretId = "masterSecretId_example";
          opts.name = "name_example";
          opts.walletHandle = 56;

          instance.createCredentialsUsingPUT(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ApiDocumentation.IssuerCreateCredentialResult);
            expect(data.credentialJson).to.be.a('string');
            expect(data.credentialJson).to.be("");
            expect(data.revocId).to.be.a('string');
            expect(data.revocId).to.be("");
            expect(data.revocRegDeltaJson).to.be.a('string');
            expect(data.revocRegDeltaJson).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getProverCredentialUsingGET', function() {
        it('should call getProverCredentialUsingGET successfully', function(done) {
          // TODO: uncomment, update parameter values for getProverCredentialUsingGET call and complete the assertions
          /*
          var opts = {};
          opts.cluelessWalletWalletId = "cluelessWalletWalletId_example";
          opts.cluelessWalletWalletId2 = "cluelessWalletWalletId_example";
          opts.cluelessWalletWalletKey = "cluelessWalletWalletKey_example";
          opts.cluelessWalletWalletKey2 = "cluelessWalletWalletKey_example";
          opts.indyWalletWalletHandle = 56;
          opts.indyWalletWalletHandle2 = 56;
          opts.personDid = "personDid_example";
          opts.personDid2 = "personDid_example";

          instance.getProverCredentialUsingGET(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(ApiDocumentation.CredentialRequest);
            expect(data.credOffer).to.be.a('string');
            expect(data.credOffer).to.be("");
            expect(data.credRequest).to.be.a(ApiDocumentation.ProverCreateCredentialRequestResult);
                  expect(data.credRequest.credentialRequestJson).to.be.a('string');
              expect(data.credRequest.credentialRequestJson).to.be("");
              expect(data.credRequest.credentialRequestMetadataJson).to.be.a('string');
              expect(data.credRequest.credentialRequestMetadataJson).to.be("");
            expect(data.credentials).to.be.a(ApiDocumentation.IssuerCreateAndStoreCredentialDefResult);
                  expect(data.credentials.credDefId).to.be.a('string');
              expect(data.credentials.credDefId).to.be("");
              expect(data.credentials.credDefJson).to.be.a('string');
              expect(data.credentials.credDefJson).to.be("");
            expect(data.masterSecretId).to.be.a('string');
            expect(data.masterSecretId).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
